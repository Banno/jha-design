.container,
.fluid-container {
  @include make-container($grid-gutter-width);
  @media (min-width: $viewport-md-min) {
    padding-left: $grid-gutter-width-lg;
    padding-right: $grid-gutter-width-lg;
  }
  @include clearfix();
}

.container {
  max-width: $column-width-max;
}

.grid {
  @include make-row;
}

@include make-grid-columns;

@include make-grid(xs);

@media (min-width: $viewport-sm-min) {
  @include make-grid(sm);
}

@media (min-width: $viewport-md-min) {
  @include make-grid(md);

  /* grid--equal-height forces the columns to be the same height by using display: flex
     this was added so that position: sticky can be used on descendants of column
     elements, specifically the .contact element */
  .grid--equal-height {
    @include flexbox-display();
  }
}

@media (min-width: $viewport-lg-min) {
  .container {
    max-width: $column-width-lg;
  }
  @include make-grid(lg);
}
@media (min-width: $viewport-xl-min) {
  .grid {
    margin-left: -$grid-gutter-width-lg / 2;
    margin-right: -$grid-gutter-width-lg / 2;
    & > [class^="grid_"] {
      padding-left: $grid-gutter-width-lg / 2;
      padding-right: $grid-gutter-width-lg / 2;
    }
  }
  .container {
    padding-left: $grid-gutter-width-xl;
    padding-right: $grid-gutter-width-xl;
  }
  .container--wide {
    max-width: $column-width-xl;
  }
}

.grid--no-gutter {
  margin-left: 0;
  margin-right: 0;
  & > [class^="grid_"] {
    padding-left: 0;
    padding-right: 0;
  }
}

.grid--tight {
  margin-left: -$grid-gutter-width-tight / 2;
  margin-right: -$grid-gutter-width-tight / 2;
  & > [class^="grid_"] {
    padding-left: $grid-gutter-width-tight / 2;
    padding-right: $grid-gutter-width-tight / 2;
  }
}
