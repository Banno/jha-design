/* Vendor prefixes
   ================================================================== */

//@TODO: use autoprefixer?

@import
  "grid-framework",
  "grid"
;


// Animations
@mixin animation($animation) {
  -webkit-animation: $animation;
          animation: $animation;
}
@mixin animation-name($name) {
  -webkit-animation-name: $name;
          animation-name: $name;
}
@mixin animation-duration($duration) {
  -webkit-animation-duration: $duration;
          animation-duration: $duration;
}
@mixin animation-timing-function($timing) {
  -webkit-animation-timing-function: $timing;
          animation-timing-function: $timing;
}
@mixin animation-delay($delay) {
  -webkit-animation-delay: $delay;
          animation-delay: $delay;
}
@mixin animation-iteration-count($count) {
  -webkit-animation-iteration-count: $count;
          animation-iteration-count: $count;
}
@mixin animation-direction($direction) {
  -webkit-animation-direction: $direction;
          animation-direction: $direction;
}
@mixin animation-fill-mode($fill-mode) {
  -webkit-animation-fill-mode: $fill-mode;
          animation-fill-mode: $fill-mode;
}

// Backface visibility
@mixin backface-visibility($visiblity) {
  -webkit-backface-visibility: $visiblity;
     -moz-backface-visibility: $visiblity;
          backface-visibility: $visiblity;
}

// Responsive visibility
@mixin responsive-visibility($parent, $size) {
  #{$parent}\@#{$size} {
    display: block !important;
  }
  table#{$parent}\@#{$size}  { display: table; }
  tr#{$parent}\@#{$size}     { display: table-row !important; }
  th#{$parent}\@#{$size},
  td#{$parent}\@#{$size}     { display: table-cell !important; }
}

@mixin responsive-invisibility($parent, $size) {
  #{$parent}\@#{$size} {
    display: none !important;
  }
}

// Drop shadows
@mixin box-shadow($shadow) {
  box-shadow: $shadow;
}

// Sticky position
@mixin sticky() {
  position: -webkit-sticky;
  position: sticky;
}

// Box sizing
@mixin box-sizing($box-sizing) {
  -moz-box-sizing: $box-sizing;
  -webkit-box-sizing: $box-sizing;
  box-sizing: $box-sizing;
}

// Flexbox
@mixin flexbox-display() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
@mixin flex-direction($direction) {
  @if $direction == row {
    -webkit-box-orient: horizontal;
  } @else {
    -webkit-box-orient: vertical;
  }
  -webkit-flex-direction: $direction;
  @if $direction == row {
    -ms-box-orient: horizontal;
  } @else {
    -ms-box-orient: vertical;
  }
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}
@mixin align-items($alignment) {
  -webkit-box-align: $alignment;
  -moz-box-align: $alignment;
  @if $alignment == flex-start {
    -ms-box-align: start;
  } @else if $alignment == flex-end {
    -ms-box-align: end;
  }
  -ms-flex-align: $alignment;
  -webkit-align-items: $alignment;
  align-items: $alignment;
}
@mixin align-self($alignment) {
  -ms-flex-item-align: $alignment;
  -webkit-align-self: $alignment;
  align-self: $alignment;
}
@mixin flex($values) {
  -webkit-box-flex: $values;
     -moz-box-flex: $values;
      -webkit-flex: $values;
          -ms-flex: $values;
              flex: $values;
}
@mixin justify-content($value) {
  -webkit-box-pack: $value;
  -moz-box-pack: $value;
  -webkit-justify-content: $value;
  @if $value == flex-start {
    -ms-flex-pack: end;
  } @else if $value == flex-end {
    -ms-flex-pack: end;
  } @else if $value == center {
    -ms-flex-pack: center;
  }
  justify-content: $value;
}
@mixin flex-shrink($value) {
  -webkit-flex-shrink: $value;
          flex-shrink: $value;
}
@mixin flex-grow($value) {
  -webkit-flex-grow: $value;
          flex-grow: $value
}
@mixin order($value) {
  -webkit-box-ordinal-group: $value;
     -moz-box-ordinal-group: $value;
             -ms-flex-order: $value;
              -webkit-order: $value;
                      order: $value;
}

// Placeholder text
@mixin placeholder($color: lighten($base-text-color, 30%)) {
  &::-moz-placeholder {
    color: $color;
    opacity: 1;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}

// Transformations
@mixin transform($transformation) {
  -webkit-transform: $transformation;
          transform: $transformation;
}

@mixin scale($ratio...) {
  -webkit-transform: scale($ratio);
          transform: scale($ratio);
}

@mixin scaleX($ratio) {
  -webkit-transform: scaleX($ratio);
          transform: scaleX($ratio);
}
@mixin scaleY($ratio) {
  -webkit-transform: scaleY($ratio);
          transform: scaleY($ratio);
}
@mixin skew($x, $y) {
  -webkit-transform: skewX($x) skewY($y);
          transform: skewX($x) skewY($y);
}
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
          transform: translate($x, $y);
}
@mixin translateX($x) {
  -webkit-transform: translateX($x);
          transform: translateX($x);
}
@mixin translateY($y) {
  -webkit-transform: translateY($y);
          transform: translateY($y);
}
@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
          transform: translate3d($x, $y, $z);
}
@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
          transform: rotate($degrees);
}
@mixin rotateX($degrees) {
  -webkit-transform: rotateX($degrees);
          transform: rotateX($degrees);
}
@mixin rotateY($degrees) {
  -webkit-transform: rotateY($degrees);
          transform: rotateY($degrees);
}
@mixin perspective($perspective) {
  -webkit-perspective: $perspective;
     -moz-perspective: $perspective;
          perspective: $perspective;
}
@mixin perspective-origin($perspective) {
  -webkit-perspective-origin: $perspective;
     -moz-perspective-origin: $perspective;
          perspective-origin: $perspective;
}
@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
     -moz-transform-origin: $origin;
          transform-origin: $origin;
}


// Transitions
@mixin transition($transition...) {
  -webkit-transition: $transition;
          transition: $transition;
}
@mixin transition-property($transition-property...) {
  -webkit-transition-property: $transition-property;
          transition-property: $transition-property;
}
@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
          transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration...) {
  -webkit-transition-duration: $transition-duration;
          transition-duration: $transition-duration;
}
@mixin transition-timing-function($timing-function) {
  -webkit-transition-timing-function: $timing-function;
          transition-timing-function: $timing-function;
}
@mixin transition-transform($transition...) {
  -webkit-transition: -webkit-transform $transition;
     -moz-transition: -moz-transform $transition;
          transition: transform $transition;
}

// Gradients



// Horizontal gradient, from left to right
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Safari 5.1-6, Chrome 10+
  background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
}

// Vertical gradient, from top to bottom
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
}

@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {
  background-repeat: repeat-x;
  background-image: -webkit-linear-gradient($deg, $start-color, $end-color); // Safari 5.1-6, Chrome 10+
  background-image: linear-gradient($deg, $start-color, $end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
}
@mixin gradient-horizontal-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-image: -webkit-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
  background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
}
@mixin gradient-vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-image: -webkit-linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
}
@mixin gradient-radial($inner-color: #555, $outer-color: #333) {
  background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);
  background-image: radial-gradient(circle, $inner-color, $outer-color);
  background-repeat: no-repeat;
}
@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {
  background-image: -webkit-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
  background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
}



// User select
@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
      -ms-user-select: $select;
          user-select: $select;
}

// Touch action
@mixin touch-action($action) {
  -ms-touch-action: $action;
      touch-action: $action;
}

// Border radius
// single side
@mixin border-top-radius($radius) {
  border-top-right-radius: $radius;
   border-top-left-radius: $radius;
}
@mixin border-right-radius($radius) {
  border-bottom-right-radius: $radius;
     border-top-right-radius: $radius;
}
@mixin border-bottom-radius($radius) {
  border-bottom-right-radius: $radius;
   border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius) {
  border-bottom-left-radius: $radius;
     border-top-left-radius: $radius;
}

// Backdrop filter
@mixin backdrop-filter($filter) {
  -webkit-backdrop-filter: $filter;
          backdrop-filter: $filter;
}

// Columns
@mixin column-count($count) {
  -webkit-column-count: $count;
     -moz-column-count: $count;
          column-count: $count;
}
@mixin column-gap($gap) {
  -webkit-column-gap: $gap;
     -moz-column-gap: $gap;
          column-gap: $gap;
}

// Sizing shortcuts
@mixin size($width, $height) {
  width: $width;
  height: $height;
}

@mixin square($size) {
  @include size($size, $size);
}

// Clearfix
@mixin clearfix() {
  &::before,
  &::after {
    content: " "; // 1
    display: table; // 2
  }
  &::after {
    clear: both;
  }
}

// Scrollable
@mixin scrollable() {
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch;
}

@mixin word-wrap() {
  overflow-wrap: break-word;
  word-wrap: break-word;
  -ms-word-break: break-all;
  word-break: break-word;
  -ms-hyphens: auto;
  -moz-hyphens: auto;
  -webkit-hyphens: auto;
  hyphens: auto;
}

// Tab focus
@mixin tab-focus() {
  outline: none;
}

// Hairlines
@mixin hairline($type, $color, $offset:0, $position:relative) {
  position: $position;
  &::after {
    content: '';
    display: block !important;
    position: absolute;
    top: auto;
    bottom: 0;
    left: $offset;
    right: 0;
    border-bottom: 1px solid $color;
  }
  @if $type == double {
    &::before {
      content: '';
      display: block !important;
      position: absolute;
      top: 0;
      bottom: auto;
      left: $offset;
      right: 0;
      border-top: 1px solid $color;
    }
  }
  @media
    // yes, 1.5 for webkit and 192dpi for non-webkit. this is because firefox is a jerk
    (-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 192dpi) {
    &::before,
    &::after {
      @include scaleY(0.5);
    }
    &::before {
      @include transform-origin(0 0);
    }
    &::after {
      @include transform-origin(0 100%);
    }
  }
}

@mixin hairline-top($color, $offset:0, $position:relative) {
  position: $position;
  &::before {
    content: '';
    display: block !important;
    position: absolute;
    top: 0;
    bottom: auto;
    left: $offset;
    right: 0;
    border-top: 1px solid $color;
    @include scaleY(0.5);
    @include transform-origin(0 0);
  }
}

@mixin hairline-offset($offset:0) {
  &::before,
  &::after {
    left: $offset;
  }
}

@mixin hairline-color($color) {
  &::before,
  &::after {
    border-bottom-color: $color;
  }
}

@mixin reset-hairline() {
  &::before,
  &::after {
    display: none !important;
  }
}

@mixin reset-hairline-top() {
  &::before {
    display: none !important;
  }
}

// deprecated
@mixin faux-border($position, $color) {
  border-#{$position}: 1px solid lighten($color, 5%);
  @media (-webkit-min-device-pixel-ratio: 1.5) {
    // MS Edge uses -webkit-min-device-pixel-ratio, so we need to rule it out
    @supports (not (-ms-accelerator: true)) {
      border-#{$position}-width: 0;
      @if $position == top {
        background-position: 0 0;
        background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='100%' height='1'><rect fill='#{$color}' x='0' y='0' width='100%' height='0.5'/></svg>");
      } @else if $position == bottom {
        background-position: 0 100%;
        background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='100%' height='1'><rect fill='#{$color}' x='0' y='0.5' width='100%' height='0.5'/></svg>");
      } @else if $position == left {
        background-position: 0 0;
        background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='1' height='100%'><rect fill='#{$color}' x='0' y='0' width='0.5' height='100%'/></svg>");
      } @else if $position == right {
        background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='1' height='100%'><rect fill='#{$color}' x='0.5' y='0' width='0.5' height='100%'/></svg>");
      }
      background-repeat: no-repeat;
    }
  }
  @media (-webkit-min-device-pixel-ratio: 3) {
    background-image: none;
    border-#{$position}-width: 1px;
  }
}

@mixin reset-faux-border($position) {
  background-image: none;
  border-#{$position}-width: 0;
}

// Shadow depth (deprecated)
@mixin shadow-depth($depth, $inset:false) {
  $inset-shadow: inset 0 0 0 1px rgba(#fff, 0.75);
  @if $inset != false {
    @if $depth == 1 {
      @include box-shadow(($shadow-ambient, $inset-shadow));
    } @else if $depth == 2 {
      @include box-shadow(($shadow-ambient-nav, $inset-shadow));
    } @else if $depth == 3 {
      @include box-shadow(($shadow-key-light, $inset-shadow));
    }
  } @else {
    @if $depth == 1 {
      @include box-shadow($shadow-ambient);
    } @else if $depth == 2 {
      @include box-shadow($shadow-ambient-nav);
    } @else if $depth == 3 {
      @include box-shadow($shadow-key-light);
    }
  }

}

// Button color
@mixin button-color($bg, $border, $text, $hover:"") {
  background-color: $bg;
  @include gradient-vertical(saturate(lighten($bg, 4%), 5%), $bg);
  border-color: $border;
  color: $text;
  &:focus {
    box-shadow: 0 1px 5px rgba($bg, .72);
  }
  &:active,
  &.is-active {
    box-shadow: $btn-focus-shadow;
  }
  @if $hover != "" {
    &:hover,
    &:active,
    &:focus,
    &.is-active {
      background-image: none;
      background-color: $hover;
      border-color: darken($border, 8%);
    }
  } @else {
    &:hover,
    &:active,
    &.is-active {
      background-image: none;
      background-color: darken($bg, 8%);
      border-color: darken($border, 8%);
    }
  }
  // special case for transparent buttons
  @if $bg == transparent {
    &:hover,
    &:active,
    &:focus,
    &.is-active {
      box-shadow: none;
      color: darken($text, 12%);
    }
  }
  &:disabled,
  &.is-disabled {
    background-image: none;
    background-color: $bg;
    border-color: $bg;
    color: rgba($text, .7);
    opacity: $btn-disabled-opacity;
  }
}

@mixin button-outline($color) {
  background-image: none;
  background-color: transparent;
  color: $color;
  border-color: $color;
  @if $color == #fff {
    &:hover,
    &:active,
    &:focus,
    &.is-active {
      box-shadow: none;
      background-color: transparent;
      color: #fff;
      border-color: $color;
    }
  } @else {
    &:hover {
      background-color: rgba(saturate($color, 5%), .12);
      color: darken($color, 8%);
      border-color: darken($color, 8%);
    }
    &:focus {
      box-shadow: 0 1px 5px rgba($color, .72);
    }
    &:active,
    &.is-active {
      box-shadow: $btn-focus-shadow;
      background-color: $color;
      color: #fff;
      border-color: darken($color, 8%);
    }
    &:disabled,
    &.is-disabled {
      &:hover,
      &:active,
      &:focus {
        background-color: transparent;
        color: rgba($color, .7);
        border-color: lighten($color, 20%);
        opacity: $btn-disabled-opacity;
      }
    }
  }
}
